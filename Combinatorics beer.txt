[MUSIC PLAYING]

So let's look at an example of computing combinations.
So some of you may have faced this issue.
You go to a pub.
They have a four beer taster.
And they have 10 beers on tap.
The question is, how many unique tasters of four beers, from the 10 choices,
can you actually create?
So on my screen, here, I have code that's going to help us do just that.
First, I'm going to load some packages.
And then the trick here is we use from the inner tools package combinations.
And we do range 10.
So we're going to have 0 to 9, so that represents our tap choices.
And then the second argument is 4.
So [? enter ?] [? tools.combination ?] is going to create all possible
combinations of 4 drawn from 0 to 9, without replacement.
And then we'll see the shape.
So the shape will tell us how many combinations there were.
And we'll look at the first 10 rows of the resulting data frame, or array.
So you can see there's 210 possible combinations.
So just from 10 taps, if I can pick four beers at a time,
I can make 210 unique combinations.
And you can see how this works.
So I've got choice, tap 0, 1, 2, 3, then tap 0, 1, 2, 4, et cetera.
And then, at this point, I go and I do tap 0, 1, 3,
4, then 0, 1, 3, 5, et cetera.
So at some point, that cycles through all possible combinations.
And I see that I can have 210 unique tasters without--
from four beers from just 10 taps, without ever repeating.
[MUSIC PLAYING]
